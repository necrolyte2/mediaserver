#! /bin/sh

### BEGIN INIT INFO
# Provides:          kodi
# Required-Start:    $all
# Required-Stop:     $all
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts instance of Kodi
# Description:       starts instance of Kodi using start-stop-daemon and xinit
### END INIT INFO

. /lib/lsb/init-functions

############### EDIT ME ##################

# path to xinit exec
DAEMON=/usr/bin/xinit

# startup args
DAEMON_OPTS=" /usr/bin/kodi-standalone -- :0"

# script name
NAME=kodi

# app name
DESC=Kodi

# user
RUN_AS=<%= @kodiuser %>

# Path of the PID file
PID_FILE=/var/run/kodi.pid

############### END EDIT ME ##################

test -x $DAEMON || exit 0

set -e

wait_for_userdata_created() {
    kodi_userdata="<%= @kodihome %>/.kodi/userdata"
    count=0
    while [ $count -lt 5 ]
    do
      if [ -d $kodi_userdata ]
      then
        return 0
      fi
      echo "${kodi_userdata} does not exist yet"
      count=$((count + 1))
      echo "Count is $count"
      sleep 1
    done
    return 1
}

status() {
    if [ ! -e $PID_FILE ]
    then
        return 1
    fi
    set +e
    ps --pid $(cat $PID_FILE) >/dev/null 2>&1
    status=$?
    set -e
    return $status
}

start() {
    if status
    then
        log_success_msg "$DESC already running"
        return 0
    fi
    log_success_msg "Starting $DESC"
    start-stop-daemon --start -c $RUN_AS --background --pidfile $PID_FILE  --make-pidfile --exec $DAEMON -- $DAEMON_OPTS
    wait_for_userdata_created
    if [ $? -eq 0 ]
    then
        log_success_msg "Started $DESC"
        return 0
    else
        log_failure_msg "Failed starting $DESC"
        return 1
    fi
}

stop() {
    if ! status
    then
        log_success_msg "$DESC already stopped"
        return 0
    fi
    log_success_msg "Stopping $DESC"
    start-stop-daemon --stop --pidfile $PID_FILE
    if [ $? -eq 0 ]
    then
        log_success_msg "Stopped $DESC"
        return 0
    else
        log_failure_msg "Failed stopping $DESC"
        return 1
    fi
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;

  restart|force-reload)
        echo "Restarting $DESC"
        stop
        sleep 5
        start
        ;;
  status)
        if status
        then
          log_success_msg "$DESC is running"
        else
          log_success_msg "$DESC is not running"
        fi
        ;;
  *)
        N=/etc/init.d/$NAME
        echo "Usage: $N {start|stop|restart|force-reload}" >&2
        exit 1
        ;;
esac

exit 0
